openapi: 3.0.0
info:
  title: Messenger API
  version: 1.0.0
  description: API for a real-time chat application with user, group, and message management.
servers:
  - url: http://localhost:5000/api
    description: Local Development Server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: User ID
        name:
          type: string
          description: User's name
        email:
          type: string
          format: email
          description: User's email address
        token:
          type: string
          description: JWT authentication token
      required:
        - _id
        - name
        - email
        - token
    Group:
      type: object
      properties:
        _id:
          type: string
          description: Group ID
        name:
          type: string
          description: Group name
        members:
          type: array
          items:
            type: string
            description: User ID of a member
        admins:
          type: array
          items:
            type: string
            description: User ID of an admin
        createdBy:
          type: string
          description: User ID of the group creator
      required:
        - _id
        - name
        - members
        - admins
        - createdBy
    Message:
      type: object
      properties:
        _id:
          type: string
          description: Message ID
        sender:
          type: string
          description: User ID of the sender
        recipient:
          type: string
          description: User ID of the recipient (for direct messages)
        group:
          type: string
          description: Group ID (for group messages)
        content:
          type: string
          description: Message content
        timestamp:
          type: string
          format: date-time
          description: Message timestamp
      required:
        - _id
        - sender
        - content
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
        error:
          type: object

paths:
  /users/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - name
                - email
                - password
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User registered successfully
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid input or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/login:
    post:
      summary: Log in an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User logged in successfully
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/forgot-password:
    post:
      summary: Request a password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Email sent
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/reset-password/{token}:
    put:
      summary: Reset user password
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: Password reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
              required:
                - password
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Password updated
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/profile:
    put:
      summary: Update user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                profilePhoto:
                  type: string
                  format: url
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Profile updated successfully
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found

  /users/change-password:
    put:
      summary: Change user password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
              required:
                - oldPassword
                - newPassword
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Password changed successfully
        '401':
          description: Unauthorized or invalid old password

  /users/friend-request:
    post:
      summary: Send a friend request
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: ID of the user to send a friend request to
              required:
                - userId
      responses:
        '200':
          description: Friend request sent
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /users/friend-request/accept:
    post:
      summary: Accept a friend request
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: ID of the user whose friend request to accept
              required:
                - userId
      responses:
        '200':
          description: Friend request accepted
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /users/friend-request/reject:
    post:
      summary: Reject a friend request
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: ID of the user whose friend request to reject
              required:
                - userId
      responses:
        '200':
          description: Friend request rejected
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /users/friend-request/cancel:
    post:
      summary: Cancel a sent friend request
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: ID of the user to whom the friend request was sent
              required:
                - userId
      responses:
        '200':
          description: Friend request cancelled
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /users/unfriend:
    post:
      summary: Unfriend a user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: ID of the user to unfriend
              required:
                - userId
      responses:
        '200':
          description: User unfriended
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /users/block:
    post:
      summary: Block a user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: ID of the user to block
              required:
                - userId
      responses:
        '200':
          description: User blocked
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /users/unblock:
    post:
      summary: Unblock a user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: ID of the user to unblock
              required:
                - userId
      responses:
        '200':
          description: User unblocked
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /groups:
    post:
      summary: Create a new group
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                members:
                  type: array
                  items:
                    type: string
                    description: User ID of a member to add
              required:
                - name
                - members
      responses:
        '201':
          description: Group created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Group created successfully
                  data:
                    $ref: '#/components/schemas/Group'
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /groups/add-member:
    post:
      summary: Add a member to a group
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupId:
                  type: string
                  description: ID of the group
                userId:
                  type: string
                  description: ID of the user to add
              required:
                - groupId
                - userId
      responses:
        '200':
          description: Member added
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /groups/remove-member:
    post:
      summary: Remove a member from a group
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupId:
                  type: string
                  description: ID of the group
                userId:
                  type: string
                  description: ID of the user to remove
              required:
                - groupId
                - userId
      responses:
        '200':
          description: Member removed
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /messages:
    post:
      summary: Send a message
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipient:
                  type: string
                  description: User ID of the recipient (for direct messages)
                group:
                  type: string
                  description: Group ID (for group messages)
                content:
                  type: string
              required:
                - content
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Message sent successfully
                  data:
                    $ref: '#/components/schemas/Message'
        '401':
          description: Unauthorized
        '500':
          description: Server error
    put:
      summary: Edit a message
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messageId:
                  type: string
                  description: ID of the message to edit
                content:
                  type: string
              required:
                - messageId
                - content
      responses:
        '200':
          description: Message edited
        '401':
          description: Unauthorized
        '500':
          description: Server error
    delete:
      summary: Delete a message
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messageId:
                  type: string
                  description: ID of the message to delete
              required:
                - messageId
      responses:
        '200':
          description: Message deleted
        '401':
          description: Unauthorized
        '500':
          description: Server error
